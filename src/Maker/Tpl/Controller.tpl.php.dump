<?= "<?php\n" ?>

namespace <?= $namespace ?>;

use <?= $entity_full_class_name ?>;
use App\Entity\Extra\Groups;
use <?= $form_full_class_name ?>;
use App\Controller\SuperController;
use Doctrine\ORM\EntityManagerInterface;
<?php if (isset($repository_full_class_name)): ?>
    use <?= $repository_full_class_name ?>;
<?php endif ?>
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Annotation\Route;
use Swagger\Annotations as SWG;

/**
* @Route("<?= $route_path ?>")
* @SWG\Tag(name="<?= $entity_class_name ?>")
*/
class <?= $class_name ?> extends SuperController
{
/**
* @Route("/", methods="GET")
* @SWG\Get(summary="<?= $entity_class_name ?> list get",
*     @SWG\Response(
*          response=200,
*          description="OK"
*     ),
*     @SWG\Parameter(
*          name="filter[name]",
*          in="query",
*          type="string",
*          required=false
*     ),
*     @SWG\Parameter(
*          name="pagination[limit]",
*          in="query",
*          type="string",
*          required=false
*     ),
*     @SWG\Parameter(
*          name="pagination[page]",
*          in="query",
*          type="string",
*          required=false
*     ),
*      @SWG\Parameter(
*          name="order[name]",
*          in="query",
*          type="string",
*          required=false,
*          enum={0:"ASC", 1:"DESC"},
*      ),
* )
* @param <?= $repository_class_name ?> $<?= $repository_var."\n" ?>
* @return Response
*/
<?php if (isset($repository_full_class_name)): ?>
    public function getCollection(<?= $repository_class_name ?> $<?= $repository_var ?>): Response
    {
    return $this->response( $<?= $repository_var ?>->findAll(),Groups::PUBLIC); // TODO Edit group
    }
<?php else: ?>
    public function getCollection(): Response
    {
    $<?= $entity_var_plural ?> = $this->getDoctrine()
    ->getRepository(<?= $entity_class_name ?>::class)
    ->findAll();

    return $this->response( $<?= $entity_var_plural ?>,Groups::PUBLIC); // TODO Edit group
    }
<?php endif ?>

/**
* @Route("/uuid}", methods="GET")
* @SWG\Get(summary="<?= $entity_class_name ?> get",
*     @SWG\Response(
*          response=200,
*          description="OK"
*     ),
* )
*/
public function get<?= $entity_class_name ?>(<?= $entity_class_name ?> $<?= $entity_var_singular ?>)
{
return $this->response($<?= $entity_var_singular ?>, Groups::PUBLIC);  // TODO Edit group
}

/**
* @Route("/", methods="POST")
* @SWG\Post(summary="<?= $entity_class_name ?> post",
*
*      @SWG\Response(
*          response=200,
*          description="OK",
*      ),
*      @SWG\Response(
*          response=400,
*          description="Validation error",
*      ),
*      @SWG\Response(
*          response=500,
*          description="Server error",
*          ),
*      @SWG\Parameter(
*          name="body",
*          in="body",
*          type="string",
*          required=true,
*          @SWG\Definition(
*              required={"name"},
*                 @SWG\Property(property="name", example="<?= $entity_class_name ?> name", type="string", description="<?= $entity_class_name ?> name"),
*          )
*      ),
* )
* @param Request $request
* @param EntityManagerInterface $em
*
* @return Response
*/
public function post<?= $entity_class_name ?>(Request $request,EntityManagerInterface $em): Response
{
return $this->update<?= $entity_class_name ?>($request,new <?= $entity_class_name ?>(),$em);
}

/**
* @Route("/{uuid}", methods="PATCH")
* @SWG\Patch(summary="<?= $entity_class_name ?> edit",
*
*      @SWG\Response(
*          response=200,
*          description="OK",
*      ),
*      @SWG\Response(
*          response=400,
*          description="Validation error",
*      ),
*      @SWG\Response(
*          response=500,
*          description="Server error",
*          ),
*      @SWG\Parameter(
*          name="body",
*          in="body",
*          type="string",
*          required=true,
*          @SWG\Definition(
*              required={"name"},
*                 @SWG\Property(property="name", example="<?= $entity_class_name ?> name", type="string", description="<?= $entity_class_name ?> name"),
*          )
*      ),
* )
* @param <?= $entity_class_name ?> $<?= $entity_var_singular."\n" ?>
* @param Request $request
* @param EntityManagerInterface $em
*
* @return Response
*/
public function edit<?= $entity_class_name ?>(Request $request,<?= $entity_class_name ?> $<?= $entity_var_singular ?>, EntityManagerInterface $em): Response
{
return $this->update<?= $entity_class_name ?>($request,$<?= $entity_var_singular ?>,$em);
}

/**
* @Route("/{uuid}",  methods="DELETE")
* @SWG\Delete(summary="<?= $entity_class_name ?> delete",
*      @SWG\Response(
*          response=200,
*          description="OK",
*          )
* )
* @param <?= $entity_class_name ?> $<?= $entity_var_singular."\n" ?>
* @param EntityManagerInterface $em
*
* @return Response
*/
public function delete<?= $entity_class_name ?>(<?= $entity_class_name ?> $<?= $entity_var_singular ?>, EntityManagerInterface $em): Response
{
$em->remove($<?= $entity_var_singular ?>);
$em->flush();

return $this->response('OK');
}


/**
* Update <?= $entity_class_name."\n" ?>
* @param <?= $entity_class_name ?> $<?= $entity_var_singular."\n" ?>
* @param Request $request
* @param EntityManagerInterface $em
*
* @return Response
*/
private function update<?= $entity_class_name ?>(Request $request, <?= $entity_class_name ?> $<?= $entity_var_singular ?>, EntityManagerInterface $em)
{
$form = $this->createForm(<?= $form_class_name ?>::class, $<?= $entity_var_singular ?>);

$form->handleRequest($request);
$form->submit($request->request->all());

if ($form->isValid()) {
if (!$<?= $entity_var_singular ?>->getId()) {
$em->persist($<?= $entity_var_singular ?>);
}
$em->flush();

return $this->response($<?= $entity_var_singular ?>, Groups::PUBLIC);  // TODO Edit group
}

return $this->response($form);
}


}
